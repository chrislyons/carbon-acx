"""Reusable copy blocks shared between the Dash app and documentation."""

from __future__ import annotations

from dataclasses import dataclass
from html import escape
from pathlib import Path
from typing import Iterable, Mapping
import json


@dataclass(frozen=True)
class DisclosureContent:
    """Structured representation of the disclosure copy."""

    title: str
    sentences: tuple[str, ...]
    metadata: tuple[tuple[str, str], ...]


DISCLOSURE_TITLE = "Disclosure (ACX009)"
_DISCLOSURE_SENTENCES = (
    "Carbon ACX prototypes summarise precomputed emissions estimates.",
    "The Dash preview and Cloudflare Pages client both read the immutable ``calc/outputs`` bundle generated by ``make build``, including the prebuilt Plotly JSON in ``calc/outputs/figures/*.json`` and IEEE references in ``calc/outputs/references/*_refs.txt``.",
    "No live data collection or API calls occur at runtime.",
    "Refer to the ``calc/outputs/manifest.json`` file for the snapshot timestamp and scope of coverage.",
)

NA_SENTENCES = (
    "Segments labelled \"NA\" indicate activity categories that do not yet have model coverage for the selected layer.",
    "They remain placeholders and are excluded from totals until new data is published in the dataset manifest.",
)

COMPARISON_SENTENCES = (
    "Layer comparisons reuse the same reference set as the underlying single-layer view.",
    "Reference numbers reflect the union of all active layer citations.",
)


def _normalise_list(values: Iterable[object]) -> list[str]:
    items: list[str] = []
    for value in values:
        if value is None:
            continue
        text = str(value).strip()
        if text:
            items.append(text)
    return items


def _manifest_metadata(manifest: Mapping | None) -> tuple[tuple[str, str], ...]:
    if not isinstance(manifest, Mapping):
        return (
            ("Latest snapshot", "Unavailable"),
            ("Regions", "None listed"),
            ("Total sources", "0"),
        )

    generated_at = manifest.get("generated_at")
    regions_raw = manifest.get("regions")
    sources_raw = manifest.get("sources")

    regions = _normalise_list(regions_raw if isinstance(regions_raw, Iterable) else [])
    sources = _normalise_list(sources_raw if isinstance(sources_raw, Iterable) else [])

    metadata: list[tuple[str, str]] = []
    metadata.append(("Latest snapshot", str(generated_at) if generated_at else "Unavailable"))
    metadata.append(("Regions", ", ".join(regions) if regions else "None listed"))
    metadata.append(("Total sources", str(len(sources))))
    return tuple(metadata)


def disclosure_content(manifest: Mapping | None) -> DisclosureContent:
    """Return the disclosure copy content for the supplied manifest payload."""

    return DisclosureContent(
        title=DISCLOSURE_TITLE,
        sentences=_DISCLOSURE_SENTENCES,
        metadata=_manifest_metadata(manifest),
    )


def disclosure_html(manifest: Mapping | None) -> str:
    """Render the disclosure block as HTML."""

    content = disclosure_content(manifest)
    paragraph = (
        f"<p><strong>{escape(content.title)}.</strong> "
        + " ".join(escape(sentence) for sentence in content.sentences)
        + "</p>"
    )
    items = "".join(
        f"<li><strong>{escape(label)}:</strong> {escape(value)}</li>"
        for label, value in content.metadata
    )
    metadata_list = f"<ul class=\"disclosure-block__meta\">{items}</ul>"
    return f'<div class="disclosure-block">{paragraph}{metadata_list}</div>'


def disclosure_markdown(manifest: Mapping | None) -> str:
    """Render the disclosure block as Markdown."""

    content = disclosure_content(manifest)
    sentences = " ".join(content.sentences)
    header_line = f"> **{content.title}.** {sentences}"
    metadata_lines = [f"> - **{label}:** {value}" for label, value in content.metadata]
    return "\n".join([header_line, *metadata_lines]) + "\n"


def na_sentences() -> tuple[str, ...]:
    """Expose the NA explainer sentences for component renderers."""

    return NA_SENTENCES


def na_markdown() -> str:
    """Return the standard NA explainer as Markdown."""

    header = "> **NA coverage.** " + " ".join(NA_SENTENCES)
    return header + "\n"


def na_html() -> str:
    """Return the NA explainer as HTML."""

    sentences = " ".join(escape(sentence) for sentence in NA_SENTENCES)
    return (
        '<div class="chart-footnote chart-footnote--na">'
        f"<p><strong>NA coverage.</strong> {sentences}</p>"
        "</div>"
    )


def comparison_markdown() -> str:
    """Return the comparison mode footnote as Markdown."""

    header = "> **Comparison view.** " + " ".join(COMPARISON_SENTENCES)
    return header + "\n"


def comparison_html() -> str:
    """Return the comparison mode footnote as HTML."""

    sentences = " ".join(escape(sentence) for sentence in COMPARISON_SENTENCES)
    return (
        '<div class="chart-footnote chart-footnote--comparison">'
        f"<p><strong>Comparison view.</strong> {sentences}</p>"
        "</div>"
    )


def load_manifest(path: Path) -> Mapping | None:
    """Load a manifest file, returning ``None`` when unavailable."""

    if not path.exists():
        return None
    return json.loads(path.read_text(encoding="utf-8"))


__all__ = [
    "DISCLOSURE_TITLE",
    "DisclosureContent",
    "comparison_html",
    "comparison_markdown",
    "disclosure_content",
    "disclosure_html",
    "disclosure_markdown",
    "load_manifest",
    "na_sentences",
    "na_html",
    "na_markdown",
]
